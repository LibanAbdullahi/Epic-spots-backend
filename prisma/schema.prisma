// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  OWNER
}

model User {
  id                    String   @id @default(cuid())
  name                  String
  email                 String   @unique
  password              String?  // Optional for OAuth users
  role                  UserRole @default(USER)
  googleId              String?  @unique // Google OAuth ID
  avatar                String?  // Profile picture URL
  resetToken            String?  // Password reset token
  resetTokenExpiry      DateTime? // Password reset token expiry
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  spots    Spot[]
  bookings Booking[]
  ratings  Rating[]

  @@map("users")
}

model Spot {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  price       Float
  latitude    Float?   // Optional coordinates for map display
  longitude   Float?   // Optional coordinates for map display
  images      String[] @default([])
  ownerId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  owner    User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bookings Booking[]
  ratings  Rating[]

  @@map("spots")
}

model Booking {
  id       String   @id @default(cuid())
  spotId   String
  userId   String
  dateFrom DateTime
  dateTo   DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spot Spot @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Prevent double booking of the same spot for overlapping dates
  @@unique([spotId, dateFrom, dateTo])
  @@map("bookings")
}

model Rating {
  id        String   @id @default(cuid())
  spotId    String
  userId    String
  rating    Int      // 1-5 stars
  comment   String?  // Optional review comment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  spot Spot @relation(fields: [spotId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Prevent multiple ratings from the same user for the same spot
  @@unique([spotId, userId])
  @@map("ratings")
} 